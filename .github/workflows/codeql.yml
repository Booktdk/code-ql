name: Security â€“ CodeQL + Secrets

on:
  push:
    branches: [main, development, staging]
  pull_request:
    branches: [main, development, staging]
  schedule:
    - cron: "0 3 * * 1" # Every Monday 03:00 UTC

permissions:
  contents: read
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  codeql:
    name: CodeQL
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        language: [javascript-typescript]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies (npm)
        run: npm ci

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  secrets:
    name: Secrets Scan (Gitleaks OSS)
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Gitleaks
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          ARCH="$(uname -m)"
          case "$ARCH" in
            x86_64)  ARCH_SUFFIX="x64" ;;
            aarch64) ARCH_SUFFIX="arm64" ;;
            *) echo "Unsupported architecture: $ARCH" >&2; exit 1 ;;
          esac
          mkdir -p /tmp/gitleaks
          ASSET_URL="$(gh api repos/gitleaks/gitleaks/releases/latest --jq ".assets[] | select(.name | test(\"linux_${ARCH_SUFFIX}.*\\\\.tar\\\\.gz$\")) | .browser_download_url")"
          if [ -z "$ASSET_URL" ]; then
            echo "Could not find a gitleaks Linux ${ARCH_SUFFIX} asset in the latest release." >&2
            gh api repos/gitleaks/gitleaks/releases/latest --jq '.assets[].name'
            exit 1
          fi
          curl -sSL "$ASSET_URL" -o /tmp/gitleaks/gitleaks.tar.gz
          tar -xzf /tmp/gitleaks/gitleaks.tar.gz -C /tmp/gitleaks
          sudo mv /tmp/gitleaks/gitleaks /usr/local/bin/gitleaks
          sudo chmod +x /usr/local/bin/gitleaks
          gitleaks version

      - name: Run Gitleaks
        id: gitleaks
        continue-on-error: true
        run: |
          set -euo pipefail
          mkdir -p reports
          EXIT_CODE=0
          gitleaks detect \
            --source . \
            --no-git \
            --report-format sarif \
            --report-path reports/gitleaks.sarif \
            --redact || EXIT_CODE=$?
          if [ ! -s reports/gitleaks.sarif ]; then
            cat > reports/gitleaks.sarif <<'EOF'
            {
              "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
              "version": "2.1.0",
              "runs": [
                {
                  "tool": { "driver": { "name": "gitleaks", "informationUri": "https://github.com/gitleaks/gitleaks" } },
                  "results": []
                }
              ]
            }
            EOF
          fi
          echo "exit_code=${EXIT_CODE}" >> "$GITHUB_OUTPUT"

      - name: Upload SARIF (Gitleaks)
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/gitleaks.sarif
          category: "gitleaks"

      - name: Fail if leaks found
        if: steps.gitleaks.outputs.exit_code != '0'
        run: |
          echo "Gitleaks found secrets (exit code ${{ steps.gitleaks.outputs.exit_code }}). Failing job."
          exit 1
